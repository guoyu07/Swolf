#!/usr/bin/env php
<?php
require_once __DIR__ . '/vendor/autoload.php';

use Inhere\Console\IO\Input;
use Inhere\Console\IO\Output;
use Inhere\Console\Application;

//use App\Config\Handler;
//use App\Config\Server;
//use App\Config\Process;

//use Swolf\Core\Server\HttpServer;
//use Swolf\Core\Server\WebsocketServer;
//use Swolf\Core\Server\BasicServer;
//use Swolf\Core\Container\Config;


$meta = [
    'name' => 'Swolf Server Controller',
    'version' => '0.4.0',
];
$input = new Input;
$output = new Output;
$app = new Application($meta, $input, $output);

$app->command('start', function (Input $in, Output $out) {

    $host = $in->getOption('h');
    $port = $in->getOption('p');
    $configFile = $in->getOption('c');
    $daemon = $in->getBoolOpt('d');

    empty($configFile) && $configFile = './swolf.ini';

    if (!file_exists($configFile)) {
        $out->error(sprintf("can not find the config file you specified: %s", $configFile), true);
    }

    $config = parse_ini_file($configFile, true);

    $pidFile = $config['settings']['pid_file'];

    //write pid to pid file.
    $handler = fopen($pidFile, 'w');
    if ($handler === false) {
        $out->error(sprintf("cannot write to pid file: %s", $pidFile), true);
    }

    $p = pcntl_fork();
    if ($p===0){

    }elseif($p=1){

    }else{

    }

    fwrite($handler, $pid);
    fclose($handler);

    if ($daemon) {
    }

    $out->info(sprintf("server is running at %s:%d", $host, $port));

}, 'start application');


$app->command('restart', function (Input $in, Output $out) {
}, 'restart application');


$app->command('stop', function (Input $in, Output $out) {
    $command = sprintf('ps aux|grep \'%s\'|grep -v grep|head -1|awk \'{print $2}\'|xargs kill ', Server::$setting['app_name']);
    system($command);
    $out->info('server status....stop');
}, 'stop application');


$app->command('status', function (Input $in, Output $out) {
    $command = sprintf('ps aux|grep \'%s\'|grep -v grep|wc -l', Server::$setting['app_name']);
    $processnum = system($command);
    if ($processnum > 0) {
        $out->info('server is running.');
    } else {
        $out->info('server is shutdown');
    }
}, 'show status of applicaiton');


$app->run();
